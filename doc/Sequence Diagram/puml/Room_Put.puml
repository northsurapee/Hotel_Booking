@startuml Manage Room (PUT)

header Hotel Booking System Sequence Diagram
footer Group Awat & Surapee
title "Manage Room (PUT)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:rooms" as routerRoom
participant "<<middleware>>\n:auth" as middleware
participant "<<controllers>>\n:rooms" as controllersRooms
participant "<<model>>\n:Room" as modelRoom
database "<<MongoDB>>\n:HotelBooking" as HotelBookingDatabase

client->server ++:req.put('/api/v1/rooms/:id')
server->routerRoom ++:app.use('/api/v1/rooms',rooms)
routerRoom -> middleware ++:protect()\nauthorize('admin')
alt Already logged in and correct role
    middleware --> routerRoom : next()
    routerRoom -> controllersRooms ++: updateRoom()
else Not logged in yet
    middleware --> client : res.status(401).json({ sucess: false, message: 'Not authorize to access this route' })
else Wrong role
    middleware --> client --: res.status(403).json({ sucess: false, message: `User role ${req.user.role} is not authorized to access this route` })
end
controllersRooms -> modelRoom ++: findByIdAndUpdate(req.params.id, req.body)
modelRoom -> HotelBookingDatabase ++: RoomSchema
HotelBookingDatabase --> modelRoom : modifiedRoom
controllersRooms <-- modelRoom : modifiedRoom
alt found in database
    controllersRooms-->client : res.status(200).json({ success: true, data: room })
else not found in database
    controllersRooms -> client : res.status(404).json({ success: false, msg: "Room not found" })
end

@enduml
